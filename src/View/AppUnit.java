/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package View;

import Model.Application.AppEntity.IappParameter;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;

/**
 *
 * @author 21AK22
 */
public class AppUnit extends javax.swing.JPanel {

    private IappParameter appElement;
    private String description;
    private String appName;
    private Image image;
    private final Color bgColor;
    private final JPopupMenu popupMenu;
    private Thread thread;

    /**
     * Creates new form AppUnit
     *
     * @param bgColor
     */
    public AppUnit(Color bgColor) {
        this.bgColor = bgColor;
        initComponents();
        this.setBackground(bgColor);
        this.popupMenu = new JPopupMenu();
        JMenuItem menuRun = new JMenuItem("Run");
        menuRun.addActionListener((e) -> {
            if (isAppAvaiable()) {
                runApp();
            }
        });
        JMenuItem menuStop = new JMenuItem("Stop");
        menuStop.addActionListener((e) -> {
            if (isAppAvaiable() && this.appElement.isRuning()) {
                stopApp();
            }
        });
        JMenuItem menuThuNhiem = new JMenuItem("Optional Mode");
        menuThuNhiem.addActionListener((e) -> {
            System.out.println("Optional Mode");
        });
        this.popupMenu.add(menuRun);
        this.popupMenu.add(menuStop);
        this.popupMenu.add(menuThuNhiem);
    }

    private void stopApp() {
        if (thread != null && thread.isAlive()) {
            return;
        }
        this.thread = new Thread() {
            @Override
            public void run() {
                setCursor(new Cursor(Cursor.WAIT_CURSOR));
                appElement.shutdown();
                setCursor(Cursor.getDefaultCursor());
            }
        };
        this.thread.start();
    }

    private void runApp() {
        if (thread != null && thread.isAlive()) {
            return;
        }
        this.thread = new Thread() {
            @Override
            public void run() {
                setCursor(new Cursor(Cursor.WAIT_CURSOR));
                appElement.runApp();
                setCursor(Cursor.getDefaultCursor());
            }
        };
        this.thread.start();
    }

    public boolean isAppAvaiable() {
        return this.appElement != null && this.appElement.getAppName() != null;
    }

    synchronized void setApp(IappParameter app) {
        unDisplay();
        new Thread() {

            @Override
            public void run() {
                appElement = app;
                description = String.format("<html>%s</html>",
                        appElement.getDescription()
                                .replaceAll("\r\n", "<br>"));
                appName = String.format("<html><center>%s</html>",
                        appElement.getAppName()
                                .replaceAll("-", "<br>"));
                image = cvtIcon2Imaga(appElement.getIcon());
                display();
            }

        }.start();
    }

    public void unDisplay() {
        this.appElement = null;
        this.lb_icon.setIcon(null);
        this.lb_icon.setText(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnAppVid = new javax.swing.JPanel();
        lb_icon = new javax.swing.JLabel();

        setAlignmentX(0.1F);
        setAlignmentY(0.1F);
        setPreferredSize(new java.awt.Dimension(100, 120));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        lb_icon.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lb_icon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_icon.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lb_icon.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout pnAppVidLayout = new javax.swing.GroupLayout(pnAppVid);
        pnAppVid.setLayout(pnAppVidLayout);
        pnAppVidLayout.setHorizontalGroup(
            pnAppVidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnAppVidLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lb_icon, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnAppVidLayout.setVerticalGroup(
            pnAppVidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnAppVidLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lb_icon, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(pnAppVid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(pnAppVid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        // TODO add your handling code here: 
        if (isAppAvaiable()) {
            this.pnAppVid.setBackground(bgColor.darker());
            if (this.description != null) {
                this.setToolTipText(description);
            }
        }
    }//GEN-LAST:event_formMouseEntered

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        if (!isAppAvaiable()) {
            return;
        }
        if (evt.getClickCount() > 1 && evt.getButton() == MouseEvent.BUTTON1) {
            if (this.appElement.isRuning()) {
                stopApp();
            } else {
                runApp();
            }
        } else if (evt.getButton() == MouseEvent.BUTTON3) {
            this.popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }

    }//GEN-LAST:event_formMouseClicked

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
        // TODO add your handling code here:
        if (!isAppAvaiable()) {
            return;
        }
        this.pnAppVid.setBackground(bgColor);
    }//GEN-LAST:event_formMouseExited

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
        if (!isAppAvaiable()) {
            return;
        }
        showIcon();
    }//GEN-LAST:event_formComponentResized


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lb_icon;
    private javax.swing.JPanel pnAppVid;
    // End of variables declaration//GEN-END:variables

    private void display() {
        if (!isAppAvaiable()) {
            return;
        }
        showIcon();
        showAppName();
    }

    private void showAppName() {
        this.lb_icon.setVisible(false);
        this.lb_icon.setText(appName);
        this.lb_icon.setVisible(true);
    }

    private void showIcon() {
        if (image != null) {
            this.lb_icon.setIcon(resizeIcon(image));
        } else {
            this.lb_icon.setIcon(getDefaultImage());
        }
    }

    private Image cvtIcon2Imaga(Icon icon) {
        if (icon == null) {
            return null;
        }
        if (icon instanceof ImageIcon) {
            return ((ImageIcon) icon).getImage();
        } else {
            BufferedImage image = new BufferedImage(icon.getIconWidth(), icon.getIconHeight(), BufferedImage.TYPE_INT_RGB);
            icon.paintIcon(null, image.getGraphics(), 0, 0);
            return image;
        }
    }

    private Icon getDefaultImage() {
        try {
            return resizeIcon(ImageIO.read(getClass().getResource("empty.png")));
        } catch (IOException ex) {
            ex.printStackTrace();
            return null;
        }
    }

    private synchronized Icon resizeIcon(Image image) {
        int middleSize = (int) (((this.lb_icon.getWidth() + this.lb_icon.getHeight()) / 2) * 0.5);
        return new ImageIcon(image.getScaledInstance(middleSize, middleSize, Image.SCALE_SMOOTH));
    }

}
